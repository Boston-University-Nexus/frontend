{"ast":null,"code":"var _jsxFileName = \"/home/danielmelchor/Documents/CodeProjects/nexus/frontend/src/components/test/ScheduleStatistics.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ScheduleStatistics extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stats: {},\n      statsHtml: []\n    };\n  }\n\n  renderStats() {\n    // To display data it needs to be an array, so we create another one with the title of each index in the array\n    let arrTitle = [\"Earliest Start\", \"Latest End\", \"Average Time Per Day\", \"Difficulty\", \"Course Load\", \"Quality\", \"Rating\"];\n    let toHtml = []; // Color of the statistics\n\n    let arrColors = [\"purple\", \"purple\", \"pink\", \"red\", \"blue\", \"green\", \"yellow\"]; // To display the hour statistics\n\n    for (let i = 0; i < 3; i++) {\n      toHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"block px-5 py-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"inline-block align-middle\",\n          children: arrTitle[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-\" + arrColors[i] + \"-500 ml-5 inline-block align-middle text-2xl font-bold\",\n          children: [this.state.stats[i], \" h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this));\n    } // To display user voted statistics\n\n\n    for (let i = 3; i < this.state.stats.length; i++) {\n      toHtml.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"block px-5 py-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"inline-block align-middle\",\n          children: arrTitle[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-5 border rounded h-7 inline-block align-middle\",\n          style: {\n            width: \"150px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-\" + arrColors[i] + \"-400 h-7 rounded\",\n            style: {\n              width: +(150 * this.state.stats[i] / 5) + \"px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this));\n    }\n\n    this.setState({\n      statsHtml: toHtml\n    });\n  }\n\n  componentDidMount() {\n    let str = \"http://localhost:8000/compute/overalstatistics/\"; // Get statistics of the current classes\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        sections: 'CAS CS 112 A1,CAS CS 132 A1,CAS WR 120 A1,CAS PH 100 A1'\n      })\n    };\n    fetch(str, requestOptions).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else throw new Error('Network response was not ok.'); // Avoids using empty data\n\n    }).then(data => {\n      // Save the statistics in state\n      this.setState({\n        stats: [data.earliestStart.slice(0, data.earliestStart.length - 3), data.latestEnd.slice(0, data.latestEnd.length - 3), data.avgTimePerDay.slice(0, data.avgTimePerDay.length - 3), data.difficulty, data.courseLoad, data.quality, data.rating]\n      }, () => this.renderStats());\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100 border-t-2 border-gray-200 grid grid-rows-3 grid-flow-col p-4\",\n      children: this.state.statsHtml\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ScheduleStatistics;","map":{"version":3,"sources":["/home/danielmelchor/Documents/CodeProjects/nexus/frontend/src/components/test/ScheduleStatistics.js"],"names":["React","ScheduleStatistics","Component","state","stats","statsHtml","renderStats","arrTitle","toHtml","arrColors","i","push","length","width","setState","componentDidMount","str","requestOptions","method","headers","body","JSON","stringify","sections","fetch","then","response","ok","json","Error","data","earliestStart","slice","latestEnd","avgTimePerDay","difficulty","courseLoad","quality","rating","catch","error","console","log","message","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nclass ScheduleStatistics extends React.Component {\n    state = {\n        stats: {},\n        statsHtml:[]\n    }\n\n    renderStats() {\n        // To display data it needs to be an array, so we create another one with the title of each index in the array\n        let arrTitle = [\"Earliest Start\",\"Latest End\",\"Average Time Per Day\",\"Difficulty\",\"Course Load\",\"Quality\",\"Rating\"]\n        let toHtml = []\n\n        // Color of the statistics\n        let arrColors = [\"purple\",\"purple\",\"pink\",\"red\",\"blue\",\"green\",\"yellow\"]\n\n        // To display the hour statistics\n        for(let i = 0; i < 3;i++){\n            toHtml.push(\n                <div className=\"block px-5 py-3\">\n                    <span className=\"inline-block align-middle\">{arrTitle[i]}</span>\n                    <div className={\"text-\" + arrColors[i] + \"-500 ml-5 inline-block align-middle text-2xl font-bold\"}>{this.state.stats[i]} h</div>\n                </div>\n            )\n        }\n\n        // To display user voted statistics\n        for(let i = 3; i < this.state.stats.length; i++) {\n            toHtml.push(\n                <div className=\"block px-5 py-3\">\n                    <span className=\"inline-block align-middle\">{arrTitle[i]}</span>\n                    <div className=\"ml-5 border rounded h-7 inline-block align-middle\" style={{ width: \"150px\" }}>\n                        <div className={\"bg-\" + arrColors[i] + \"-400 h-7 rounded\"} style={{ width: + (150*this.state.stats[i]/5) + \"px\"}}></div>\n                    </div>\n                </div>\n            )\n        }\n\n        this.setState({statsHtml:toHtml})\n    }\n\n    componentDidMount() {\n        let str = \"http://localhost:8000/compute/overalstatistics/\"\n\n        // Get statistics of the current classes\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ sections: 'CAS CS 112 A1,CAS CS 132 A1,CAS WR 120 A1,CAS PH 100 A1' })\n        };\n\n        fetch(str, requestOptions)\n            .then(response => {\n                if(response.ok) {\n                    return response.json();\n                } else\n                    throw new Error('Network response was not ok.'); // Avoids using empty data\n            })\n            .then(data => {\n                // Save the statistics in state\n                this.setState({\n                    stats: [\n                        data.earliestStart.slice(0,data.earliestStart.length-3),\n                        data.latestEnd.slice(0,data.latestEnd.length-3),\n                        data.avgTimePerDay.slice(0,data.avgTimePerDay.length-3),\n                        data.difficulty,\n                        data.courseLoad,\n                        data.quality,\n                        data.rating\n                    ]\n                },() => this.renderStats());\n            })\n            .catch(function(error) {\n                console.log(error.message);\n            });;\n    }\n\n    render() {\n        return (\n            <div className=\"w-100 border-t-2 border-gray-200 grid grid-rows-3 grid-flow-col p-4\">\n                {this.state.statsHtml}\n            </div>\n        )\n    }\n}\n\nexport default ScheduleStatistics;\n"]},"metadata":{},"sourceType":"module"}