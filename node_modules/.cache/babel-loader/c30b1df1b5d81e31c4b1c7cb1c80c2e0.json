{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar setClientOffset_1 = require(\"./local/setClientOffset\");\n\nvar discount_lodash_1 = require(\"../../utils/discount_lodash\");\n\nvar invariant = require('invariant');\n\nvar types_1 = require(\"./types\");\n\nvar ResetCoordinatesAction = {\n  type: types_1.INIT_COORDS,\n  payload: {\n    clientOffset: null,\n    sourceClientOffset: null\n  }\n};\n\nfunction createBeginDrag(manager) {\n  return function beginDrag(sourceIds, options) {\n    if (sourceIds === void 0) {\n      sourceIds = [];\n    }\n\n    if (options === void 0) {\n      options = {\n        publishSource: true\n      };\n    }\n\n    var _a = options.publishSource,\n        publishSource = _a === void 0 ? true : _a,\n        clientOffset = options.clientOffset,\n        getSourceClientOffset = options.getSourceClientOffset;\n    var monitor = manager.getMonitor();\n    var registry = manager.getRegistry(); // Initialize the coordinates using the client offset\n\n    manager.dispatch(setClientOffset_1.setClientOffset(clientOffset));\n    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source\n\n    var sourceId = getDraggableSource(sourceIds, monitor);\n\n    if (sourceId === null) {\n      manager.dispatch(ResetCoordinatesAction);\n      return;\n    } // Get the source client offset\n\n\n    var sourceClientOffset = null;\n\n    if (clientOffset) {\n      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n      sourceClientOffset = getSourceClientOffset(sourceId);\n    } // Initialize the full coordinates\n\n\n    manager.dispatch(setClientOffset_1.setClientOffset(clientOffset, sourceClientOffset));\n    var source = registry.getSource(sourceId);\n    var item = source.beginDrag(monitor, sourceId);\n    verifyItemIsObject(item);\n    registry.pinSource(sourceId);\n    var itemType = registry.getSourceType(sourceId);\n    return {\n      type: types_1.BEGIN_DRAG,\n      payload: {\n        itemType: itemType,\n        item: item,\n        sourceId: sourceId,\n        clientOffset: clientOffset || null,\n        sourceClientOffset: sourceClientOffset || null,\n        isSourcePublic: !!publishSource\n      }\n    };\n  };\n}\n\nexports.default = createBeginDrag;\n\nfunction verifyInvariants(sourceIds, monitor, registry) {\n  invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n\n  for (var _i = 0, sourceIds_1 = sourceIds; _i < sourceIds_1.length; _i++) {\n    var s = sourceIds_1[_i];\n    invariant(registry.getSource(s), 'Expected sourceIds to be registered.');\n  }\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n  invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\n\nfunction verifyItemIsObject(item) {\n  invariant(discount_lodash_1.isObject(item), 'Item must be an object.');\n}\n\nfunction getDraggableSource(sourceIds, monitor) {\n  var sourceId = null;\n\n  for (var i = sourceIds.length - 1; i >= 0; i--) {\n    if (monitor.canDragSource(sourceIds[i])) {\n      sourceId = sourceIds[i];\n      break;\n    }\n  }\n\n  return sourceId;\n}","map":{"version":3,"sources":["/home/danielmelchor/Documents/CodeProjects/nexus/frontend/node_modules/dnd-core/lib/cjs/actions/dragDrop/beginDrag.js"],"names":["Object","defineProperty","exports","value","setClientOffset_1","require","discount_lodash_1","invariant","types_1","ResetCoordinatesAction","type","INIT_COORDS","payload","clientOffset","sourceClientOffset","createBeginDrag","manager","beginDrag","sourceIds","options","publishSource","_a","getSourceClientOffset","monitor","getMonitor","registry","getRegistry","dispatch","setClientOffset","verifyInvariants","sourceId","getDraggableSource","verifyGetSourceClientOffsetIsFunction","source","getSource","item","verifyItemIsObject","pinSource","itemType","getSourceType","BEGIN_DRAG","isSourcePublic","default","isDragging","_i","sourceIds_1","length","s","isObject","i","canDragSource"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar setClientOffset_1 = require(\"./local/setClientOffset\");\nvar discount_lodash_1 = require(\"../../utils/discount_lodash\");\nvar invariant = require('invariant');\nvar types_1 = require(\"./types\");\nvar ResetCoordinatesAction = {\n    type: types_1.INIT_COORDS,\n    payload: {\n        clientOffset: null,\n        sourceClientOffset: null,\n    },\n};\nfunction createBeginDrag(manager) {\n    return function beginDrag(sourceIds, options) {\n        if (sourceIds === void 0) { sourceIds = []; }\n        if (options === void 0) { options = {\n            publishSource: true,\n        }; }\n        var _a = options.publishSource, publishSource = _a === void 0 ? true : _a, clientOffset = options.clientOffset, getSourceClientOffset = options.getSourceClientOffset;\n        var monitor = manager.getMonitor();\n        var registry = manager.getRegistry();\n        // Initialize the coordinates using the client offset\n        manager.dispatch(setClientOffset_1.setClientOffset(clientOffset));\n        verifyInvariants(sourceIds, monitor, registry);\n        // Get the draggable source\n        var sourceId = getDraggableSource(sourceIds, monitor);\n        if (sourceId === null) {\n            manager.dispatch(ResetCoordinatesAction);\n            return;\n        }\n        // Get the source client offset\n        var sourceClientOffset = null;\n        if (clientOffset) {\n            verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n            sourceClientOffset = getSourceClientOffset(sourceId);\n        }\n        // Initialize the full coordinates\n        manager.dispatch(setClientOffset_1.setClientOffset(clientOffset, sourceClientOffset));\n        var source = registry.getSource(sourceId);\n        var item = source.beginDrag(monitor, sourceId);\n        verifyItemIsObject(item);\n        registry.pinSource(sourceId);\n        var itemType = registry.getSourceType(sourceId);\n        return {\n            type: types_1.BEGIN_DRAG,\n            payload: {\n                itemType: itemType,\n                item: item,\n                sourceId: sourceId,\n                clientOffset: clientOffset || null,\n                sourceClientOffset: sourceClientOffset || null,\n                isSourcePublic: !!publishSource,\n            },\n        };\n    };\n}\nexports.default = createBeginDrag;\nfunction verifyInvariants(sourceIds, monitor, registry) {\n    invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n    for (var _i = 0, sourceIds_1 = sourceIds; _i < sourceIds_1.length; _i++) {\n        var s = sourceIds_1[_i];\n        invariant(registry.getSource(s), 'Expected sourceIds to be registered.');\n    }\n}\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n    invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\nfunction verifyItemIsObject(item) {\n    invariant(discount_lodash_1.isObject(item), 'Item must be an object.');\n}\nfunction getDraggableSource(sourceIds, monitor) {\n    var sourceId = null;\n    for (var i = sourceIds.length - 1; i >= 0; i--) {\n        if (monitor.canDragSource(sourceIds[i])) {\n            sourceId = sourceIds[i];\n            break;\n        }\n    }\n    return sourceId;\n}\n"]},"metadata":{},"sourceType":"script"}